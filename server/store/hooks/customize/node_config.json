{"path":"customize/node","depend":null,"script":"import { GraphQLObjectType, GraphQLSchema, GraphQLString, GraphQLNonNull, GraphQLInt, GraphQLID } from 'graphql'\nimport { FastifyBaseLogger } from 'fastify/types/logger'\nimport { InternalClient } from 'fireboom-wundersdk/server'\nimport { Mutations, Queries } from 'generated/fireboom.internal.client';\nimport { Client } from \"generated/fireboom.client\";\nimport { translate } from './translate'\n\n\nexport default new GraphQLSchema({\n  query: new GraphQLObjectType\u003cany, {\n    wundergraph: {\n      log: FastifyBaseLogger,\n      internalClient: InternalClient\u003cQueries, Mutations\u003e\n    }\n  }\u003e({\n    name: 'Query',\n    fields: {\n      hello: {\n        type: GraphQLString,\n        resolve() {\n          return 'world'\n        },\n      },\n    },\n  }),\n  mutation: new GraphQLObjectType\u003c{\n    args: string,\n    userId: string\n  }, {\n    wundergraph: {\n      log: FastifyBaseLogger,\n      internalClient: InternalClient\u003cQueries, Mutations\u003e\n    }\n  }\u003e({\n    name: 'Mutation',\n    fields: {\n      GeneratePictureWithAI: {\n        args: {\n          args: {\n            type: new GraphQLNonNull(GraphQLString)\n          },\n          userId: {\n            type: new GraphQLNonNull(GraphQLInt)\n          }\n        },\n        type: new GraphQLObjectType({\n          fields: {\n            id: {\n              type: GraphQLID,\n            },\n            url: {\n              type: GraphQLString\n            }\n          },\n          name: 'data'\n        }),\n        async resolve(_, input, ctx) {\n          const { log, internalClient } = ctx.wundergraph\n          const userId = input.userId\n          const json = JSON.parse(input.args)\n          if (json.prompt \u0026\u0026 /[\\u4e00-\\u9fa5]/.test(json.prompt)) {\n            json.prompt = await translate(json.prompt, log)\n          }\n          try {\n            // 消耗积分\n            const client = new Client({})\n            // 增加魔法值\n            const resp = await client.mutation.UsePoints({ input: { id: userId }})\n            if (resp.status !== \"ok\" || resp?.body.errors) {\n              throw resp\n            }\n            // const data = await fetch('https://stablediffusionapi.com/api/v3/dreambooth', {\n            //   method: 'post',\n            //   headers: {\n            //     'Content-Type': 'application/json'\n            //   },\n            //   body: JSON.stringify({\n            //     key: 'EXKt6qfISnSLeFYlLpw9gqHirkCT8hWIpYWllNfuvCUHXBIYk8UoIkUkX8xk',\n            //     samples: '1',\n            //     num_inference_steps: '30',\n            //     guidance_scale: 7.5,\n            //     ...json\n            //   })\n            // }).then(resp =\u003e resp.json())\n            const data = {\n              status: 'success',\n              messege: '',\n              output: ['https://stable-diffusion-api.s3.amazonaws.com/generations/dd011494-4bd7-4257-9eb6-dc2269b1288c-0.png']\n            }\n            if (data.status === 'error') {\n              throw new Error(data.messege)\n            }\n            if (data.status === 'success') {\n              const resp1 = await internalClient.mutations.CreateOneCreation({ input: {args: input.args, userId }})\n              if (!resp1.errors) {\n                const resp2 = await internalClient.mutations.CreateOneArtWork({ input: {\n                  creationId: resp1.data.data.id,\n                  url: data.output[0]\n                }})\n                if (!resp2.errors) {\n                  return {\n                    url: data.output[0],\n                    id: resp2.data.data.id\n                  }\n                }\n              }\n            }\n            return data\n          } catch (error) {\n            throw error\n          }\n        }\n      }\n    }\n  })\n})","switch":false,"scriptType":"","input":null,"type":""}